<Start> ::= <Program>
<Program> ::= { <Global> }

<Global> ::= <GlobalDecl> | <ImportStmt> | <Function>
<GlobalDecl> ::= <Location> <Typ> <Name> "=" <Const> ";"
<ImportStmt> ::= "import" <Location> <Javascript> "as" <Name> "(" <Params> ")" ";"
<Function> ::= <Location> <Typ> <Name> "(" <Params> ")" <Stmt>
<Locaiton> ::= "front" | "back"

<Stmt> ::= <IfStmt> | <WhileStmt> | <Single> ";" | <Stmts>
<Stmts> ::= "{" { <Stmt> } "}"
<IfStmt> ::= "if" "(" <Expr> ")" <Stmt> ["else"  <Stmt> ]
<WhileStmt> ::= "while" "(" <Expr> ")" <Stmt>
<Single> ::= <Declare> | <Assign> | <Discard> | <ReturnStmt> | "break" | "continue"

<Declare> ::= "let" <Name> ":" <Typ> "=" <Expr>
<Assign> ::= <Name> "=" <Expr>
<Discard> ::= <Expr>
<ReturnStmt> ::= "return" <Expr>

<Expr> ::= <BoolExpr> [<EqualOp> <BoolExpr>]
<BoolExpr> ::= <P/MExpr> {<BoolOp> <P/MExpr>}
<P/MExpr> ::= <M/DExpr> {<P/MOp> <M/DExpr>}
<M/DExpr> ::= <ExpExpr> {<M/DOp> <ExpExpr>}
<ExpExpr> ::= <UnaryExpr> {<ExpOp> <UnaryExpr>}
<UnaryExpr> ::= {<UnaryOp>} <Atom>
<Atom> ::= <Call> | <List> | <Dict> | <Const> | <Name> | "(" <Expr> ")"
<Call> ::= <Name> "(" <Args> ")"
<List> ::= "[" [<Expr> {"," <Expr>}] "]"
<Dict> ::= "{" [<Expr>":"<Expr> {"," <Expr>":"<Expr>}] "}"
<EqualOp> ::= "==" | "!=" | ">" | "<" | ">=" | "<="
<BoolOp> ::= "and" | "or"
<P/MOp> ::= "+" | "-"
<M/DOp> ::= "*" | "/"
<ExpOp> ::= "^"
<UnaryOp> ::= "-" | "+"

<Const> ::= <String> | <Number> | <Bool>
<Bool> ::= "True" | "False"
<String> ::= regex("(:?[^\"]|\\\")*")
<Number> ::= regex("\d+(:?\.\d*)?|\.\d+")

<Args> ::= [<Expr> {"," <Expr>}]
<Params> ::= [<Typ> <Name> {"," <Typ> <Name>}]
<Name> ::= regex("[\w_][\w_\d]*")
<Typ> ::= "string" | "num" | "list" | "struct" | "void"

<JavaScript> ::= <String>
